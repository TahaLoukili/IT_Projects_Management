/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.95
 * Generated at: 2023-12-16 17:56:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import Models.Service;
import Models.Tache;
import java.util.List;
import Models.Dev;
import Models.Chef;

public final class voir_002davancement_002dtaches_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("Models.Chef");
    _jspx_imports_classes.add("Models.Service");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("Models.Dev");
    _jspx_imports_classes.add("Models.Tache");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "Les JSPs ne permettent que GET, POST ou HEAD. Jasper permet aussi OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Voir avancement taches</title>\r\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
 
int ProjetId = (int) request.getAttribute("ProjetId"); 

Chef chef=(Chef) request.getAttribute("chef");
List<Tache> listeTaches=(List<Tache> )request.getAttribute("listeTaches");
List<Dev> listDevs=(List<Dev>)request.getAttribute("listDevs");
List<Service> listServices=(List<Service>)request.getAttribute("listServices");

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(" \r\n");
      out.write("  <div class=\"flex flex-col items-center justify-center px-6 py-8 mx-auto md:h-screen lg:py-0\">\r\n");
      out.write("    <a href=\"#\" class=\"flex items-center mb-6 text-2xl font-semibold text-gray-900 dark:text-white\">\r\n");
      out.write("        <img class=\"w-8 h-8 mr-2\" src=\"https://flowbite.s3.amazonaws.com/blocks/marketing-ui/logo.svg\" alt=\"logo\">\r\n");
      out.write("        Espace Chef  \r\n");
      out.write("    </a>\r\n");
      out.write("  <div class=\"w-full bg-white rounded-lg shadow dark:border md:mt-0 sm:max-w-3xl xl:p-0 dark:bg-gray-800 dark:border-gray-700 xl:w-4/5\">\r\n");
      out.write("    <div class=\"p-6 space-y-4 md:space-y-6 sm:p-8\">\r\n");
      out.write("  <!-- Table to display tasks -->\r\n");
      out.write("<table class=\"min-w-full divide-y divide-gray-200\">\r\n");
      out.write("  <thead class=\"bg-gray-50\">\r\n");
      out.write("    <tr>\r\n");
      out.write("      <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Service Name</th>\r\n");
      out.write("      <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Nom Tache</th>\r\n");
      out.write("      <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Nom Developpeur</th>\r\n");
      out.write("      <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Avancement</th>\r\n");
      out.write("      <!-- Add other table headers based on your Tache model -->\r\n");
      out.write("      <!-- Example: <th class=\"...\">ID Dev</th> -->\r\n");
      out.write("    </tr>\r\n");
      out.write("  </thead>\r\n");
      out.write("  <tbody class=\"bg-white divide-y divide-gray-200\">\r\n");
      out.write("    ");
 
    String currentService = "";
    for (Tache tache : listeTaches) {
        for (Service service : listServices) {
            if (service.getId() == tache.getIdService() && !service.getDescription().equals(currentService)) {
                currentService = service.getDescription();
    
      out.write("\r\n");
      out.write("    <tr class=\"bg-gray-100\"><!-- Add your preferred color class for service line -->\r\n");
      out.write("      <td class=\"px-6 py-4 font-semibold\" colspan=\"4\">");
      out.print( currentService );
      out.write("</td>\r\n");
      out.write("    </tr>\r\n");
      out.write("    ");
 
            }
        } 
    
      out.write("\r\n");
      out.write("    <tr>\r\n");
      out.write("      <td class=\"px-6 py-4 whitespace-nowrap\"></td>\r\n");
      out.write("      <td class=\"px-6 py-4 whitespace-nowrap\">");
      out.print( tache.getNom() );
      out.write("</td>\r\n");
      out.write("      ");
 
      boolean devFound = false;
      for (Dev dev : listDevs) { 
        if (dev.getId() == tache.getIdDev()) {
          devFound = true;
      
      out.write("\r\n");
      out.write("          <td class=\"px-6 py-4 whitespace-nowrap\">");
      out.print( dev.getUsername() );
      out.write("</td>\r\n");
      out.write("      ");
 
      break;
        }
      } 
      if (!devFound) { 
      out.write("\r\n");
      out.write("          <td class=\"px-6 py-4 whitespace-nowrap\">No Dev Assigned</td>\r\n");
      out.write("      ");
 } 
      out.write("\r\n");
      out.write("      <td class=\"px-6 py-4 whitespace-nowrap\">\r\n");
      out.write("        <!-- Display progress bar for advancement -->\r\n");
      out.write("        <div class=\"bg-gray-200 h-4 w-32 rounded-full overflow-hidden\">\r\n");
      out.write("          <div class=\"bg-blue-500 h-full text-xs text-center text-white\" style=\"width:");
      out.print( tache.getAvancement() );
      out.write("%;\"> ");
      out.print( tache.getAvancement() );
      out.write("%</div>\r\n");
      out.write("        </div>\r\n");
      out.write("      </td>\r\n");
      out.write("      <!-- Display other tache attributes within table cells -->\r\n");
      out.write("      <!-- Example: <td>");
      out.print( tache.getIdDev() );
      out.write("</td> -->\r\n");
      out.write("    </tr>\r\n");
      out.write("    ");
 } 
      out.write("\r\n");
      out.write("  </tbody>\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
