/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.95
 * Generated at: 2023-12-16 16:42:27 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import Models.Dev;
import Models.Chef;

public final class services_002dprojet_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("Models.Chef");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("Models.Dev");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "Les JSPs ne permettent que GET, POST ou HEAD. Jasper permet aussi OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Affecter services</title>\r\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
 int ProjetId = (int) request.getAttribute("ProjetId"); 

Chef chef=(Chef) request.getAttribute("chef");
List<Dev> listDevs=(List<Dev>) request.getAttribute("listDevs");

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(" \r\n");
      out.write("  <div class=\"flex flex-col items-center justify-center px-6 py-8 mx-auto md:h-screen lg:py-0\">\r\n");
      out.write("    <a href=\"#\" class=\"flex items-center mb-6 text-2xl font-semibold text-gray-900 dark:text-white\">\r\n");
      out.write("        <img class=\"w-8 h-8 mr-2\" src=\"https://flowbite.s3.amazonaws.com/blocks/marketing-ui/logo.svg\" alt=\"logo\">\r\n");
      out.write("        Espace Chef  \r\n");
      out.write("    </a>\r\n");
      out.write("  <div class=\"w-full bg-white rounded-lg shadow dark:border md:mt-0 sm:max-w-3xl xl:p-0 dark:bg-gray-800 dark:border-gray-700\">\r\n");
      out.write("    <div class=\"p-6 space-y-4 md:space-y-6 sm:p-8\">\r\n");
      out.write("        <h1 class=\"text-xl font-bold leading-tight tracking-tight text-gray-900 md:text-2xl dark:text-white\">\r\n");
      out.write("            Creer les services et leurs taches correspondantes\r\n");
      out.write("        </h1>\r\n");
      out.write("        <form action=\"ajouterrServicesServlet\" method=\"post\" class=\"space-y-4 md:space-y-6 flex flex-col\">\r\n");
      out.write("            <div class=\"flex flex-col\">\r\n");
      out.write("                <label for=\"meth\" class=\"mb-2 text-sm font-medium text-gray-900 dark:text-white\">Description de service</label>\r\n");
      out.write("                <input type=\"text\" name=\"description\" id=\"description\" class=\"bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 mb-4\" placeholder=\"service de...\" required oninput=\"showHiddenDiv()\">\r\n");
      out.write("                <label for=\"meth\" class=\"mb-2 text-sm font-medium text-gray-900 dark:text-white\">duree en Jour</label>\r\n");
      out.write("                <input type=\"number\" name=\"duree\" id=\"duree\" class=\"bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 mb-6\" placeholder=\"1\" required min=\"1\" step=\"1\" oninput=\"showHiddenDiv()\">\r\n");
      out.write("                <input type=\"hidden\" value=\"");
      out.print(ProjetId);
      out.write("\" name=\"ProjetId\"> \r\n");
      out.write("                 <input type=\"hidden\" value=\"");
      out.print(chef.getId());
      out.write("\" name=\"ChefId\"> \r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("           <div id=\"hiddenDiv\" class=\"hidden\">\r\n");
      out.write("    Ajouter la Tache de cette services et affecter pour un developpeur\r\n");
      out.write("    <div class=\"flex\">\r\n");
      out.write("        <input type=\"text\" name=\"nomTache_1\" id=\"nomTache_1\" class=\"bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 mr-4\" placeholder=\"Nom Tache\">\r\n");
      out.write("        <select name=\"selectList_1\" id=\"selectList_1\" class=\"bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500\">\r\n");
      out.write("            <option value=\"\" disabled selected hidden>Select Developer</option> \r\n");
      out.write("            ");
 for (Dev dev : listDevs) { 
      out.write("\r\n");
      out.write("                <option value=\"");
      out.print( dev.getId() );
      out.write('"');
      out.write('>');
      out.print( dev.getUsername() );
      out.write("</option>\r\n");
      out.write("            ");
 } 
      out.write("\r\n");
      out.write("        </select>\r\n");
      out.write("        <button type=\"button\" onclick=\"addNewDiv()\" class=\"bg-blue-600 text-white hover:bg-primary-700 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-4 py-2\">Ajouter</button>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("            <div class=\"flex justify-end\" id=\"enregistrerButton\">\r\n");
      out.write("                <input name=\"Enregistrer\" type=\"submit\" value=\"Enregistrer\" class=\"text-white bg-blue-600 hover:bg-primary-700 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-4 py-2 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800\" >\r\n");
      out.write("            </div>\r\n");
      out.write("        </form>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("    function showHiddenDiv() {\r\n");
      out.write("        var descriptionValue = document.getElementById('description').value;\r\n");
      out.write("        var dureeValue = document.getElementById('duree').value;\r\n");
      out.write("        var hiddenDiv = document.getElementById('hiddenDiv');\r\n");
      out.write("\r\n");
      out.write("        if (descriptionValue !== '' && dureeValue !== '') {\r\n");
      out.write("            hiddenDiv.classList.remove('hidden');\r\n");
      out.write("        } else {\r\n");
      out.write("            hiddenDiv.classList.add('hidden');\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    var counter = 2; // Initialize a counter for the divs\r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("  \r\n");
      out.write("\r\n");
      out.write("    function addNewDiv() {\r\n");
      out.write("        var hiddenDiv = document.getElementById('hiddenDiv');\r\n");
      out.write("        var clone = hiddenDiv.cloneNode(true);\r\n");
      out.write("\r\n");
      out.write("        var deleteButton = document.createElement('button');\r\n");
      out.write("        deleteButton.textContent = 'Supprimer';\r\n");
      out.write("        deleteButton.classList.add('bg-red-600', 'text-white', 'hover:bg-red-700', 'focus:ring-4', 'focus:outline-none', 'focus:ring-red-300', 'font-medium', 'rounded-lg', 'text-sm', 'px-4', 'py-2', 'ml-2');\r\n");
      out.write("        deleteButton.onclick = function () {\r\n");
      out.write("            clone.parentNode.removeChild(clone);\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("        clone.appendChild(deleteButton);\r\n");
      out.write("\r\n");
      out.write("        var enregistrerButton = document.getElementById('enregistrerButton');\r\n");
      out.write("        enregistrerButton.parentNode.insertBefore(clone, enregistrerButton);\r\n");
      out.write("\r\n");
      out.write("        // Find inputs in the cloned div and update their names\r\n");
      out.write("        var inputs = clone.querySelectorAll('input, select');\r\n");
      out.write("        inputs.forEach(function(input) {\r\n");
      out.write("            if (input.name !== '') {\r\n");
      out.write("            	input.value=\"\";\r\n");
      out.write("            	input.name = input.name.replace(\"_1\", '');\r\n");
      out.write("                input.setAttribute('name', input.name + '_' + counter);\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        counter++; // Increment the counter for the next div\r\n");
      out.write("        \r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
